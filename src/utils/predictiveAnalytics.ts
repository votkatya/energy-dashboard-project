import { parseDate } from './dateUtils';

interface EnergyEntry {
  date: string;
  score: number;
  thoughts: string;
  category: string;
  week: string;
  month: string;
}

export interface BurnoutRisk {
  level: 'low' | 'medium' | 'high' | 'critical';
  daysLow: number;
  message: string;
  color: string;
  icon: string;
}

export interface WeekPrediction {
  probability: number;
  confidence: 'low' | 'medium' | 'high';
  message: string;
  trend: 'up' | 'down' | 'stable';
}

export interface RestDayRecommendation {
  dayOfWeek: string;
  dayNumber: number;
  reason: string;
  avgEnergy: number;
}

export const analyzeBurnoutRisk = (entries: EnergyEntry[]): BurnoutRisk => {
  if (!entries || entries.length < 3) {
    return {
      level: 'low',
      daysLow: 0,
      message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
      color: 'text-muted-foreground',
      icon: 'Info'
    };
  }

  const last7Days = entries.slice(-7);
  const consecutiveLowDays = getConsecutiveLowEnergyDays(last7Days);
  const avgLast7 = last7Days.reduce((sum, e) => sum + e.score, 0) / last7Days.length;
  const lowDaysCount = last7Days.filter(e => e.score < 3).length;
  
  console.log('üîç –†–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:', last7Days.map(e => `${e.date}: ${e.score}`));
  console.log('üìä –°—Ä–µ–¥–Ω—è—è –∑–∞ 7 –¥–Ω–µ–π:', avgLast7.toFixed(2), '| –ù–∏–∑–∫–∏—Ö –¥–Ω–µ–π:', lowDaysCount, '| –ü–æ–¥—Ä—è–¥:', consecutiveLowDays);

  if (consecutiveLowDays >= 5 || avgLast7 < 2.5) {
    return {
      level: 'critical',
      daysLow: consecutiveLowDays,
      message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å! ${consecutiveLowDays} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –Ω–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è. –°—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö.`,
      color: 'text-destructive',
      icon: 'AlertTriangle'
    };
  }

  if (consecutiveLowDays >= 3 || lowDaysCount >= 4) {
    return {
      level: 'high',
      daysLow: consecutiveLowDays,
      message: `–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è. ${lowDaysCount} –¥–Ω–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é —Å –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –æ—Ç–¥—ã—Ö.`,
      color: 'text-orange-600',
      icon: 'AlertCircle'
    };
  }

  if (consecutiveLowDays >= 2 || lowDaysCount >= 2 || avgLast7 < 3.5) {
    return {
      level: 'medium',
      daysLow: consecutiveLowDays,
      message: '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫. –≠–Ω–µ—Ä–≥–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ.',
      color: 'text-yellow-600',
      icon: 'Info'
    };
  }

  if (avgLast7 >= 4) {
    return {
      level: 'low',
      daysLow: 0,
      message: '–û—Ç–ª–∏—á–Ω–æ! –≠–Ω–µ—Ä–≥–∏—è –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ, —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª–µ–Ω.',
      color: 'text-energy-excellent',
      icon: 'CheckCircle2'
    };
  }

  return {
    level: 'low',
    daysLow: 0,
    message: '–í—Å—ë —Ö–æ—Ä–æ—à–æ! –≠–Ω–µ—Ä–≥–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞, —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –Ω–∏–∑–∫–∏–π.',
    color: 'text-energy-excellent',
    icon: 'CheckCircle2'
  };
};

const getConsecutiveLowEnergyDays = (entries: EnergyEntry[]): number => {
  let count = 0;
  for (let i = entries.length - 1; i >= 0; i--) {
    if (entries[i].score < 3) {
      count++;
    } else {
      break;
    }
  }
  return count;
};

export const predictNextWeek = (entries: EnergyEntry[]): WeekPrediction => {
  if (!entries || entries.length < 7) {
    return {
      probability: 50,
      confidence: 'low',
      message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞',
      trend: 'stable'
    };
  }

  const last14Days = entries.slice(-14);
  const lastWeek = last14Days.slice(-7);
  const prevWeek = last14Days.length >= 14 ? last14Days.slice(0, 7) : [];

  const lastWeekGood = lastWeek.filter(e => e.score >= 4).length;
  const prevWeekGood = prevWeek.length > 0 ? prevWeek.filter(e => e.score >= 4).length : lastWeekGood;
  const lastWeekAvg = lastWeek.reduce((sum, e) => sum + e.score, 0) / lastWeek.length;

  console.log('üìà –ü—Ä–æ–≥–Ω–æ–∑ - –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è:', lastWeek.map(e => `${e.date}: ${e.score}`));
  console.log('üìà –ü—Ä–æ–≥–Ω–æ–∑ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è:', prevWeek.map(e => `${e.date}: ${e.score}`));
  console.log('üìä –•–æ—Ä–æ—à–∏—Ö –¥–Ω–µ–π: –ø–æ—Å–ª–µ–¥–Ω—è—è', lastWeekGood, '/ –ø—Ä–µ–¥—ã–¥—É—â–∞—è', prevWeekGood, '| –°—Ä–µ–¥–Ω—è—è:', lastWeekAvg.toFixed(2));

  const trend = lastWeekGood > prevWeekGood ? 'up' : lastWeekGood < prevWeekGood ? 'down' : 'stable';
  
  let baseProbability = (lastWeekGood / lastWeek.length) * 100;
  
  if (lastWeekAvg >= 4.5) baseProbability = Math.max(baseProbability, 85);
  else if (lastWeekAvg >= 4) baseProbability = Math.max(baseProbability, 75);
  else if (lastWeekAvg >= 3.5) baseProbability = Math.max(baseProbability, 65);
  
  if (trend === 'up') baseProbability += 10;
  else if (trend === 'down') baseProbability -= 15;

  const probability = Math.min(95, Math.max(10, baseProbability));

  const last4Weeks = entries.slice(-28);
  const variance = calculateVariance(last4Weeks.map(e => e.score));
  const confidence = variance < 0.5 ? 'high' : variance < 1.2 ? 'medium' : 'low';

  let message = '';
  if (probability >= 75 && trend === 'up') {
    message = `–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑! –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ç—ë—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–π –Ω–µ–¥–µ–ª–∏ ${Math.round(probability)}%`;
  } else if (probability >= 70) {
    message = `–û—Ç–ª–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã! –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–π –Ω–µ–¥–µ–ª–∏ ${Math.round(probability)}%`;
  } else if (probability >= 50) {
    message = `–ù–µ–ø–ª–æ—Ö–∏–µ —à–∞–Ω—Å—ã. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–π –Ω–µ–¥–µ–ª–∏ –æ–∫–æ–ª–æ ${Math.round(probability)}%`;
  } else if (trend === 'down') {
    message = `–≠–Ω–µ—Ä–≥–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–π –Ω–µ–¥–µ–ª–∏ ${Math.round(probability)}%. –ü–ª–∞–Ω–∏—Ä—É–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`;
  } else {
    message = `–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω. –§–æ–∫—É—Å –Ω–∞ –æ—Ç–¥—ã—Ö–µ –ø–æ–≤—ã—Å–∏—Ç —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –Ω–µ–¥–µ–ª—é`;
  }

  return {
    probability: Math.round(probability),
    confidence,
    message,
    trend
  };
};

const calculateVariance = (scores: number[]): number => {
  const avg = scores.reduce((sum, s) => sum + s, 0) / scores.length;
  const squareDiffs = scores.map(s => Math.pow(s - avg, 2));
  return squareDiffs.reduce((sum, d) => sum + d, 0) / scores.length;
};

export const recommendRestDay = (entries: EnergyEntry[]): RestDayRecommendation | null => {
  if (!entries || entries.length < 14) {
    return null;
  }

  const dayOfWeekScores: { [key: number]: { sum: number; count: number } } = {};
  
  entries.forEach(entry => {
    const date = parseDate(entry.date);
    const dayOfWeek = date.getDay();
    if (!dayOfWeekScores[dayOfWeek]) {
      dayOfWeekScores[dayOfWeek] = { sum: 0, count: 0 };
    }
    dayOfWeekScores[dayOfWeek].sum += entry.score;
    dayOfWeekScores[dayOfWeek].count += 1;
  });

  const dayNames = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É'];
  let worstDay = 0;
  let worstAvg = 5;

  Object.keys(dayOfWeekScores).forEach(day => {
    const dayNum = parseInt(day);
    const avg = dayOfWeekScores[dayNum].sum / dayOfWeekScores[dayNum].count;
    if (avg < worstAvg && dayOfWeekScores[dayNum].count >= 2) {
      worstAvg = avg;
      worstDay = dayNum;
    }
  });

  if (worstAvg >= 3.5) {
    return null;
  }

  const reasons = [
    '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–∏–∑–∫—É—é —ç–Ω–µ—Ä–≥–∏—é',
    '–ü–∞—Ç—Ç–µ—Ä–Ω —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è',
    '–û—Ä–≥–∞–Ω–∏–∑–º—É –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'
  ];

  return {
    dayOfWeek: dayNames[worstDay],
    dayNumber: worstDay,
    reason: reasons[Math.floor(Math.random() * reasons.length)],
    avgEnergy: Math.round(worstAvg * 10) / 10
  };
};