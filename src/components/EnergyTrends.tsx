import { useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { parseDate } from '@/utils/dateUtils';
import { calculateStats } from '@/utils/statsCalculator';
import { 
  analyzeBurnoutRisk, 
  predictNextWeek, 
  recommendRestDay 
} from '@/utils/predictiveAnalytics';

interface EnergyTrendsProps {
  data?: any;
  isLoading?: boolean;
}

const EnergyTrends = ({ data, isLoading }: EnergyTrendsProps) => {
  const predictions = useMemo(() => {
    if (!data?.entries || data.entries.length === 0) {
      return {
        burnoutRisk: null,
        weekPrediction: null,
        restDay: null
      };
    }

    return {
      burnoutRisk: analyzeBurnoutRisk(data.entries),
      weekPrediction: predictNextWeek(data.entries),
      restDay: recommendRestDay(data.entries)
    };
  }, [data]);

  const analytics = useMemo(() => {
    if (!data?.entries || data.entries.length === 0) {
      return {
        currentMonthAvg: 0,
        previousMonthAvg: 0,
        goodPercent: 0,
        neutralPercent: 0,
        badPercent: 0,
        bestDayOfWeek: '–≤—ã—Ö–æ–¥–Ω—ã–µ',
        worstDayOfWeek: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∏',
        bestWeek: { start: '', end: '', avg: 0 },
        trend: 0,
        totalEntries: 0
      };
    }

    const entries = data.entries;
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();

    const currentMonthEntries = entries.filter((e: any) => {
      const date = parseDate(e.date);
      return date.getMonth() === currentMonth && date.getFullYear() === currentYear;
    });

    const previousMonthEntries = entries.filter((e: any) => {
      const date = parseDate(e.date);
      const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;
      const prevYear = currentMonth === 0 ? currentYear - 1 : currentYear;
      return date.getMonth() === prevMonth && date.getFullYear() === prevYear;
    });

    const currentMonthStats = calculateStats(currentMonthEntries);
    const previousMonthStats = calculateStats(previousMonthEntries);
    const allStats = calculateStats(entries);

    const currentMonthAvg = currentMonthStats.average;
    const previousMonthAvg = previousMonthStats.average;
    const { good, neutral, bad, total } = allStats;

    const dayOfWeekScores: { [key: number]: { sum: number; count: number } } = {};
    entries.forEach((e: any) => {
      const date = parseDate(e.date);
      const dayOfWeek = date.getDay();
      if (!dayOfWeekScores[dayOfWeek]) {
        dayOfWeekScores[dayOfWeek] = { sum: 0, count: 0 };
      }
      dayOfWeekScores[dayOfWeek].sum += e.score;
      dayOfWeekScores[dayOfWeek].count += 1;
    });

    const dayNames = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
    let bestDay = 0;
    let worstDay = 0;
    let bestAvg = 0;
    let worstAvg = 5;

    Object.keys(dayOfWeekScores).forEach((day) => {
      const dayNum = parseInt(day);
      const avg = dayOfWeekScores[dayNum].sum / dayOfWeekScores[dayNum].count;
      if (avg > bestAvg) {
        bestAvg = avg;
        bestDay = dayNum;
      }
      if (avg < worstAvg) {
        worstAvg = avg;
        worstDay = dayNum;
      }
    });

    const last3Months = entries.filter((e: any) => {
      const date = parseDate(e.date);
      const threeMonthsAgo = new Date();
      threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
      return date >= threeMonthsAgo;
    });

    const first3MonthsGood = last3Months.slice(0, Math.floor(last3Months.length / 2)).filter((e: any) => e.score >= 4).length;
    const second3MonthsGood = last3Months.slice(Math.floor(last3Months.length / 2)).filter((e: any) => e.score >= 4).length;
    const trend = last3Months.length > 0 
      ? ((second3MonthsGood / Math.max(last3Months.length / 2, 1)) - (first3MonthsGood / Math.max(last3Months.length / 2, 1))) * 100
      : 0;

    return {
      currentMonthAvg: Math.round(currentMonthAvg * 10) / 10,
      previousMonthAvg: Math.round(previousMonthAvg * 10) / 10,
      goodPercent: Math.round((good / total) * 100),
      neutralPercent: Math.round((neutral / total) * 100),
      badPercent: Math.round((bad / total) * 100),
      bestDayOfWeek: dayNames[bestDay],
      worstDayOfWeek: dayNames[worstDay],
      bestWeek: { start: '', end: '', avg: 0 },
      trend: Math.round(trend),
      totalEntries: total
    };
  }, [data]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <Icon name="Loader2" size={32} className="animate-spin text-primary" />
      </div>
    );
  }

  if (!data?.entries || data.entries.length === 0) {
    return (
      <Card className="shadow-lg">
        <CardContent className="py-12 text-center">
          <p className="text-muted-foreground">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {predictions.burnoutRisk && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name={predictions.burnoutRisk.icon as any} size={24} className={predictions.burnoutRisk.color} />
              –†–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-start gap-4">
                <div className="flex-1">
                  <p className={`text-lg font-medium ${predictions.burnoutRisk.color}`}>
                    {predictions.burnoutRisk.message}
                  </p>
                  {predictions.burnoutRisk.level !== 'low' && (
                    <p className="text-sm text-muted-foreground mt-2">
                      üí° –°–æ–≤–µ—Ç: –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –æ—Ç–¥—ã—Ö, —Å–æ–∫—Ä–∞—Ç–∏ –Ω–∞–≥—Ä—É–∑–∫—É, —É–¥–µ–ª—è–π –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
                    </p>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {predictions.weekPrediction && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="TrendingUp" size={24} className="text-primary" />
              –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center gap-4">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <div className="text-4xl font-heading font-bold text-primary">
                      {predictions.weekPrediction.probability}%
                    </div>
                    <div className="flex flex-col">
                      <span className="text-xs text-muted-foreground uppercase">–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</span>
                      <span className="text-xs text-muted-foreground">
                        {predictions.weekPrediction.confidence === 'high' ? 'üéØ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å' :
                         predictions.weekPrediction.confidence === 'medium' ? 'üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å' :
                         'üîÆ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å'}
                      </span>
                    </div>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {predictions.weekPrediction.message}
                  </p>
                </div>
                <div className="text-5xl">
                  {predictions.weekPrediction.trend === 'up' ? 'üìà' :
                   predictions.weekPrediction.trend === 'down' ? 'üìâ' : '‚û°Ô∏è'}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {predictions.restDay && (
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Coffee" size={24} className="text-accent" />
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ—Ç–¥—ã—Ö—É
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex items-start gap-3">
                <span className="text-3xl">üõå</span>
                <div className="flex-1">
                  <p className="font-medium text-lg mb-1">
                    –ü–ª–∞–Ω–∏—Ä—É–π –æ—Ç–¥—ã—Ö –≤ {predictions.restDay.dayOfWeek}
                  </p>
                  <p className="text-sm text-muted-foreground mb-2">
                    {predictions.restDay.reason}
                  </p>
                  <div className="inline-flex items-center gap-2 px-3 py-1 rounded-full bg-accent/20 text-accent text-sm">
                    <Icon name="Activity" size={14} />
                    –°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è: {predictions.restDay.avgEnergy}
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      <Card className="shadow-lg border-l-4 border-l-energy-excellent">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="TrendingUp" size={24} className="text-energy-excellent" />
            –û–±—â–∏–π —Ç—Ä–µ–Ω–¥
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="p-6 rounded-xl bg-gradient-to-r from-energy-excellent/20 to-transparent">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –º–µ—Å—è—Ü</span>
                <span className="text-2xl">üìà</span>
              </div>
              <div className="text-4xl font-heading font-bold text-energy-excellent">
                {analytics.currentMonthAvg || '‚Äî'}
              </div>
              {analytics.previousMonthAvg > 0 && (
                <p className="text-sm text-muted-foreground mt-2">
                  {analytics.currentMonthAvg > analytics.previousMonthAvg ? '+' : ''}
                  {(analytics.currentMonthAvg - analytics.previousMonthAvg).toFixed(1)} –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º
                </p>
              )}
            </div>

            <div className="grid grid-cols-3 gap-3 md:gap-4">
              <div className="p-2 md:p-4 rounded-xl bg-gradient-to-br from-energy-excellent/10 to-transparent border border-energy-excellent/30">
                <div className="flex flex-col md:flex-row items-center gap-1 md:gap-2 mb-1">
                  <span className="text-lg md:text-xl">üòä</span>
                  <div className="text-xl md:text-2xl font-heading font-bold text-energy-excellent">
                    {analytics.goodPercent}%
                  </div>
                </div>
                <p className="text-xs md:text-sm text-muted-foreground text-center md:text-left">–•–æ—Ä–æ—à–∏–µ</p>
              </div>
              <div className="p-2 md:p-4 rounded-xl bg-gradient-to-br from-energy-neutral/10 to-transparent border border-energy-neutral/30">
                <div className="flex flex-col md:flex-row items-center gap-1 md:gap-2 mb-1">
                  <span className="text-lg md:text-xl">üòê</span>
                  <div className="text-xl md:text-2xl font-heading font-bold text-energy-neutral">
                    {analytics.neutralPercent}%
                  </div>
                </div>
                <p className="text-xs md:text-sm text-muted-foreground text-center md:text-left">–°—Ä–µ–¥–Ω–∏–µ</p>
              </div>
              <div className="p-2 md:p-4 rounded-xl bg-gradient-to-br from-energy-low/10 to-transparent border border-energy-low/30">
                <div className="flex flex-col md:flex-row items-center gap-1 md:gap-2 mb-1">
                  <span className="text-lg md:text-xl">üòî</span>
                  <div className="text-xl md:text-2xl font-heading font-bold text-energy-low">
                    {analytics.badPercent}%
                  </div>
                </div>
                <p className="text-xs md:text-sm text-muted-foreground text-center md:text-left">–ü–ª–æ—Ö–∏–µ</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">–ù–∞–±–ª—é–¥–µ–Ω–∏—è</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="p-4 rounded-xl bg-gradient-to-r from-primary/10 to-transparent border-l-4 border-l-primary">
              <div className="flex items-start gap-3">
                <span className="text-2xl">‚ú®</span>
                <div>
                  <p className="font-medium mb-1">–õ—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</p>
                  <p className="text-sm text-muted-foreground">
                    {analytics.bestDayOfWeek.charAt(0).toUpperCase() + analytics.bestDayOfWeek.slice(1)} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
                  </p>
                </div>
              </div>
            </div>

            {analytics.trend !== 0 && (
              <div className="p-4 rounded-xl bg-gradient-to-r from-accent/10 to-transparent border-l-4 border-l-accent">
                <div className="flex items-start gap-3">
                  <span className="text-2xl">üéØ</span>
                  <div>
                    <p className="font-medium mb-1">
                      {analytics.trend > 0 ? '–¢—Ä–µ–Ω–¥ —É–ª—É—á—à–µ–Ω–∏—è' : '–¢—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–∏—Ö –¥–Ω–µ–π {analytics.trend > 0 ? '–≤—ã—Ä–æ—Å–ª–æ' : '–∏–∑–º–µ–Ω–∏–ª–æ—Å—å'} –Ω–∞ {Math.abs(analytics.trend)}%
                    </p>
                  </div>
                </div>
              </div>
            )}

            <div className="p-4 rounded-xl bg-gradient-to-r from-energy-good/10 to-transparent border-l-4 border-l-energy-good">
              <div className="flex items-start gap-3">
                <span className="text-2xl">üî•</span>
                <div>
                  <p className="font-medium mb-1">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</p>
                  <p className="text-sm text-muted-foreground">
                    –°–¥–µ–ª–∞–Ω–æ {analytics.totalEntries} {analytics.totalEntries === 1 ? '–∑–∞–ø–∏—Å—å' : analytics.totalEntries < 5 ? '–∑–∞–ø–∏—Å–∏' : '–∑–∞–ø–∏—Å–µ–π'} - –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!
                  </p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="shadow-lg bg-gradient-to-br from-primary/5 to-accent/5">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span className="text-2xl">üí°</span>
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-3">
            {analytics.goodPercent >= 70 && (
              <li className="flex items-start gap-3">
                <div className="w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-primary font-bold text-sm">üí™</span>
                </div>
                <p className="text-sm">–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</p>
              </li>
            )}
            {analytics.goodPercent < 50 && (
              <li className="flex items-start gap-3">
                <div className="w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-primary font-bold text-sm">üéØ</span>
                </div>
                <p className="text-sm">–ü–æ–ø—Ä–æ–±—É–π –≤—ã—è–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã: —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é –≤ —Ö–æ—Ä–æ—à–∏–µ –¥–Ω–∏?</p>
              </li>
            )}
            <li className="flex items-start gap-3">
              <div className="w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                <span className="text-primary font-bold text-sm">üìù</span>
              </div>
              <p className="text-sm">
                –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ {analytics.worstDayOfWeek} - –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —ç–Ω–µ—Ä–≥–∏—è —á–∞—Å—Ç–æ –Ω–∏–∂–µ
              </p>
            </li>
            <li className="flex items-start gap-3">
              <div className="w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center flex-shrink-0 mt-0.5">
                <span className="text-primary font-bold text-sm">‚ú®</span>
              </div>
              <p className="text-sm">–°—Ç–∞—Ä–∞–π—Å—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ –¥–Ω—è—Ö - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏</p>
            </li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
};

export default EnergyTrends;